#!/bin/bash -eu

# utility routine
die() { echo "$*" >&2; exit -1; }

# error messages only
exec > /dev/null

## Set variables from arguments
# source $(dirname $(readlink -f $0))/set-vars-from-args.sh
{
  ## what follows, up to the close-curly,
  ## is the contents of set-vars-from-args.sh,
  ## incorporated so this script can be installed directly in /usr/lib/git-core/

  # parse args
  usage="usage: $0 [ -t <seconds> ] <somerepo>.git [ init ] commit1 [ commit2 ... ]"

  # flag ('-X') parsing
  seconds=0
  while getopts ":t:" opt; do
    case $opt in
      t) seconds=$OPTARG ;;
      \?) die $usage ;;
      :) die $usage ;;
    esac
  done
  shift $(( OPTIND - 1 ))

  # now the other args
  [ $# -lt 2 ] && die $usage

  repo=${1:?$usage}
  [ "${repo%.git}" = "$repo" ] && die $usage   # reponame must end in '.git'
  repo=${repo#file://} # trim off "file://" if it's there

  clone=$(basename ${repo/.git/}) # local copy

  readme=README.$clone
  shift

  initialize_blank_repo="false"
  if [ "$1" = "init" ]; then
    initialize_blank_repo="true"
    shift
  fi

  export commits=${*:-}
}

# source $(dirname $(readlink -f $0))/set-vars-from-args.sh

# create a bare repo from an existing working copy
create-repo-from() {
  local clone=$1
  mkdir -p $clone
  cd $clone
  touch $readme
  git init -q
  git add .
  git commit -q -m"initial"
  cd ~-
  git clone -q --bare $clone $repo
  rm -rf $clone
  git clone -q file://$( readlink -f $repo )
}

# "init" arg says "wipe out old stuff, start from scratch"
if [ "$initialize_blank_repo" = "true" ]; then
  rm -rf $repo $clone
fi

if ! [ -d $repo ]; then
  create-repo-from $clone
fi

# bring the clone up-to-date, then add new commits and push
cd $clone
[ -d .git ] && git pull -q # grab any updates

for i in $commits; do
  echo commit $i >> $readme
  git add .
  sleep $seconds
  git commit -q -m"Commit $i"
done

git push -q
